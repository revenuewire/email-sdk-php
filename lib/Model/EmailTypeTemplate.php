<?php
/**
 * EmailTypeTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire Email Service
 *
 * An email service
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * EmailTypeTemplate Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EmailTypeTemplate implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'emailTypeTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title' => 'string',
        'scope' => 'string',
        'account_id' => 'int',
        'product_id' => 'int',
        'offer_id' => 'int',
        'to' => '\Swagger\Client\Model\EmailTypeTemplateTo',
        'from' => '\Swagger\Client\Model\EmailTypeTemplateTo',
        'order' => 'int',
        'description' => 'string',
        'type' => 'string',
        'variables' => '\Swagger\Client\Model\EmailTypeVariable[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'scope' => 'scope',
        'account_id' => 'accountId',
        'product_id' => 'productId',
        'offer_id' => 'offerId',
        'to' => 'to',
        'from' => 'from',
        'order' => 'order',
        'description' => 'description',
        'type' => 'type',
        'variables' => 'variables'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'scope' => 'setScope',
        'account_id' => 'setAccountId',
        'product_id' => 'setProductId',
        'offer_id' => 'setOfferId',
        'to' => 'setTo',
        'from' => 'setFrom',
        'order' => 'setOrder',
        'description' => 'setDescription',
        'type' => 'setType',
        'variables' => 'setVariables'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'scope' => 'getScope',
        'account_id' => 'getAccountId',
        'product_id' => 'getProductId',
        'offer_id' => 'getOfferId',
        'to' => 'getTo',
        'from' => 'getFrom',
        'order' => 'getOrder',
        'description' => 'getDescription',
        'type' => 'getType',
        'variables' => 'getVariables'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SCOPE_PUBLIC = 'PUBLIC';
    const SCOPE_PRIVATE = 'PRIVATE';
    const TYPE_GENERIC = 'GENERIC';
    const TYPE_PRODUCT_ACTIVATION = 'PRODUCT_ACTIVATION';
    const TYPE_SUPPORT_CONTACT_US = 'SUPPORT_CONTACT_US';
    const TYPE_ACCOUNT_ACTIVATION = 'ACCOUNT_ACTIVATION';
    const TYPE_FORGET_PASSWORD = 'FORGET_PASSWORD';
    const TYPE_CUSTOMER_PURCHASE_LOOKUP = 'CUSTOMER_PURCHASE_LOOKUP';
    const TYPE_CPA_APPLIED_TO_RUN = 'CPA_APPLIED_TO_RUN';
    const TYPE_BETA_FEEDBACK = 'BETA_FEEDBACK';
    const TYPE_UPDATE_EMAIL_REQUEST = 'UPDATE_EMAIL_REQUEST';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getScopeAllowableValues()
    {
        return [
            self::SCOPE_PUBLIC,
            self::SCOPE_PRIVATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_GENERIC,
            self::TYPE_PRODUCT_ACTIVATION,
            self::TYPE_SUPPORT_CONTACT_US,
            self::TYPE_ACCOUNT_ACTIVATION,
            self::TYPE_FORGET_PASSWORD,
            self::TYPE_CUSTOMER_PURCHASE_LOOKUP,
            self::TYPE_CPA_APPLIED_TO_RUN,
            self::TYPE_BETA_FEEDBACK,
            self::TYPE_UPDATE_EMAIL_REQUEST,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["PUBLIC", "PRIVATE"];
        if (!in_array($this->container['scope'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'scope', must be one of 'PUBLIC', 'PRIVATE'.";
        }

        $allowed_values = ["GENERIC", "PRODUCT_ACTIVATION", "SUPPORT_CONTACT_US", "ACCOUNT_ACTIVATION", "FORGET_PASSWORD", "CUSTOMER_PURCHASE_LOOKUP", "CPA_APPLIED_TO_RUN", "BETA_FEEDBACK", "UPDATE_EMAIL_REQUEST"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'GENERIC', 'PRODUCT_ACTIVATION', 'SUPPORT_CONTACT_US', 'ACCOUNT_ACTIVATION', 'FORGET_PASSWORD', 'CUSTOMER_PURCHASE_LOOKUP', 'CPA_APPLIED_TO_RUN', 'BETA_FEEDBACK', 'UPDATE_EMAIL_REQUEST'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["PUBLIC", "PRIVATE"];
        if (!in_array($this->container['scope'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["GENERIC", "PRODUCT_ACTIVATION", "SUPPORT_CONTACT_US", "ACCOUNT_ACTIVATION", "FORGET_PASSWORD", "CUSTOMER_PURCHASE_LOOKUP", "CPA_APPLIED_TO_RUN", "BETA_FEEDBACK", "UPDATE_EMAIL_REQUEST"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets scope
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     * @param string $scope
     * @return $this
     */
    public function setScope($scope)
    {
        $allowed_values = array('PUBLIC', 'PRIVATE');
        if (!is_null($scope) && (!in_array($scope, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'scope', must be one of 'PUBLIC', 'PRIVATE'");
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets account_id
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param int $account_id
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets product_id
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     * @param int $product_id
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets offer_id
     * @return int
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     * @param int $offer_id
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets to
     * @return \Swagger\Client\Model\EmailTypeTemplateTo
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     * @param \Swagger\Client\Model\EmailTypeTemplateTo $to
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets from
     * @return \Swagger\Client\Model\EmailTypeTemplateTo
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     * @param \Swagger\Client\Model\EmailTypeTemplateTo $from
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets order
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     * @param int $order
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Type name must be unique
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('GENERIC', 'PRODUCT_ACTIVATION', 'SUPPORT_CONTACT_US', 'ACCOUNT_ACTIVATION', 'FORGET_PASSWORD', 'CUSTOMER_PURCHASE_LOOKUP', 'CPA_APPLIED_TO_RUN', 'BETA_FEEDBACK', 'UPDATE_EMAIL_REQUEST');
        if (!is_null($type) && (!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'GENERIC', 'PRODUCT_ACTIVATION', 'SUPPORT_CONTACT_US', 'ACCOUNT_ACTIVATION', 'FORGET_PASSWORD', 'CUSTOMER_PURCHASE_LOOKUP', 'CPA_APPLIED_TO_RUN', 'BETA_FEEDBACK', 'UPDATE_EMAIL_REQUEST'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets variables
     * @return \Swagger\Client\Model\EmailTypeVariable[]
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     * @param \Swagger\Client\Model\EmailTypeVariable[] $variables A list of variables avaiable for the type
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


